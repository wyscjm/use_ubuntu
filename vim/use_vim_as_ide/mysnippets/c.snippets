snippet ifndef
#ifndef ${1:SOME_DEFINE}
#define $1
$0
#endif /* $1 */
endsnippet

snippet printf
printf("${1:%s}\n"${1/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$2${1/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

## Main
# main
snippet main
int main(int argc, const char *argv[])
{
	${0}
	return 0;
}
endsnippet

# main(void)
snippet mainn
int main(void)
{
	${0}
	return 0;
}
endsnippet

##
## Preprocessor
# #include <...>
snippet inc "lib path"
#include <${1:stdio}.h>
endsnippet

# #include "..."
snippet inC "current path"
#include "${1:`!p snip.rv = snip.basename`}.h"
endsnippet


# ifndef...define...endif
snippet ndef
#ifndef $1
#define ${1:SYMBOL} ${2:value}
#endif

$3
endsnippet

# define
snippet def
#define
endsnippet

# ifdef...endif
snippet ifdef
#ifdef ${1:FOO}
${2:#define }
#endif
endsnippet

# if
snippet #if
#if ${1:FOO}
${0}
#endif
endsnippet

# header include guard
snippet once
#ifndef ${1:__`!p snip.rv = snip.basename.upper()`_H}
#define $1
${0}
#endif /* end of include guard: $1 */
endsnippet

##
## Control Statements
# if
snippet if
if (${1:/* condition */}) {
	${2}
}
endsnippet

# else
snippet el
else {
	${1}
}
endsnippet

# else if
snippet elif
else if (${1:/* condition */}) {
	${2}
}
endsnippet

# ifi
snippet ifi
if (${1:/* condition */}) ${2};

endsnippet
# ternary
snippet t
${1:/* condition */} ? ${2:a} : ${3:b}
endsnippet

# switch
snippet switch
switch (${1:/* variable */}) {
	case ${2:/* variable case */}:
		${3}
	break;
	${4}
	default:
	${5}
	break;
}

endsnippet

# switch without default
snippet switchndef "without default"
switch (${1:/* variable */}) {
	case ${2:/* variable case */}:
		${3}
	${4:break;}${5}
}
endsnippet

# case
snippet case
case ${1:/* variable case */}:
	${2}
break;${3}
endsnippet

##
## Loops

# for
snippet for
for (${2:i} = 0; $2 < ${1:count}; $2${3:++}) {
	${4}
}
endsnippet

# for (custom)
snippet forr
for (${1:i} = ${2:0}; ${3:$1 < 10}; $1${4:++}) {
${5}
}
endsnippet

# while
snippet wh
while (${1:/* condition */}) {
	${2}
}
endsnippet

# do... while
snippet do
do {
	${2}
} while (${1:/* condition */});
endsnippet

##
## Functions
# function definition
snippet fun
${1:void} ${2:function_name}(${3})
{
	${4}
}
endsnippet

# function declaration
snippet fund "function decalaration"
${1:void} ${2:function_name}(${3});
endsnippet

##
## Types
# typedef
snippet td
typedef ${1:int} ${2:MyCustomType};
endsnippet

# struct
snippet st
struct ${1:struct name} {
${2:/* data */}
}${3: /* optional variable list */};
endsnippet

# typedef struct
snippet tds
typedef struct ${2:_$1 }{
${3:/* data */}
} ${1:struct list};
endsnippet

# typedef enum
snippet tde
typedef enum {
${1:/* data */}
} ${2:foo};
endsnippet

##
## Input/Output
# printf
snippet pr
printf("${1:%s}\n"${2});
endsnippet

# fprintf (again, this isn't as nice as TextMate's version, but it works)
snippet fpr
fprintf(${1:stderr}, "${2:%s}\n"${3});
endsnippet

# getopt
snippet getopt
int choice;
while (1)
{
static struct option long_options[] =
{
/* Use flags like so:
{"verbose", no_argument, &verbose_flag, 'V'}*/
/* Argument styles: no_argument, required_argument, optional_argument */
{"version", no_argument, 0, 'v'},
{"help", no_argument, 0, 'h'},
${1}
{0,0,0,0}
};
int option_index = 0;
/* Argument parameters:
no_argument: " "
required_argument: ":"
optional_argument: "::" */
choice = getopt_long( argc, argv, "vh",
long_options, &option_index);
if (choice == -1)
break;
switch( choice )
{
case 'v':
${2}
break;
case 'h':
${3}
break;
case '?':
/* getopt_long will have already printed an error */
break;
default:
/* Not sure how to get here... */
return EXIT_FAILURE;
}
}
/* Deal with non-option arguments here */
if ( optind < argc )
{
while ( optind < argc )
{
${0}
}
}
endsnippet

##
## Miscellaneous
# This is kind of convenient
snippet .
[${1}]
endsnippet

# GPL
snippet gpl
/*
* This program is free software; you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation; either version 2 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program; if not, see <http://www.gnu.org/licenses/>.
*
* Copyright (C) ${1:`!v g:snips_author`}, `date +%Y`
*/
${0}
endsnippet

