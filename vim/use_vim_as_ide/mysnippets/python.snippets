#add optparse
snippet optparse
from optparse import OptionParser
USAGE = """
@python `!p snip.rv=snip.fn` ${1: -h help}
"""
parser = OptionParser(usage=USAGE)
endsnippet

#add parser
snippet parser.ad
parser.add_option("-${1:h}","--${2:help}",
					dest="$2",default=${3:default value},
					help="${4:Please input help message}")
endsnippet

#add optins
snippet options "options, args"
options, args = parser.parse_args()
endsnippet



snippet newv
Author: `!v g:snips_author`
Email:	`!v g:snips_email`
Github: `!v g:snips_github`
Date:	`date +%Y-%m-%d`
Ver:	${2:V0.1}
Description: ${3}
endsnippet

snippet header
#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
File:	${1:`!p snip.rv = snip.fn`}
Author: `!v g:snips_author`
Email:	`!v g:snips_email`
Github: `!v g:snips_github`
Date:	`date +%Y-%m-%d`
Ver:	${2:V0.1}
Description: ${3}
"""

endsnippet

snippet #!
#!/usr/bin/env python
# -*- coding: utf-8 -*-
endsnippet

snippet imp
import ${0:module}
endsnippet

snippet uni
def __unicode__(self):
${0:representation}
endsnippet

snippet from
from ${1:package} import ${0:module}
endsnippet

# Module Docstring
snippet docs
"""
File: ${1:`!p snip.rv = snip.fn`}
Author: `!v g:snips_author`
Email: `!v g:snips_email`
Github: `!v g:snips_github`
Description: ${2}
"""
endsnippet

snippet wh
while ${1:condition}:
	${0}
endsnippet

# dowh - does the same as do...while in other languages
snippet dowh
while True:
	${1}
	if ${0:condition}:
		break
endsnippet

snippet with
with ${1:expr} as ${2:var}:
${0}
endsnippet

# New Class
snippet cl
class ${1:ClassName}(${2:object}):
	"""${3:docstring for $1}"""
	def __init__(self, ${4:arg}):
	${5:super($1, self).__init__()}
	self.$4 = $4
	${0}
endsnippet

snippet indentdef
def ${1:fname}(${2:`!v indent('.')`}):
"""${3:docstring for $1}"""
${0}
endsnippet
# New Function
snippet def
def ${1:fname}(${2:`!v indent('.') ? 'self' : ''`}):
	"""${3:docstring for $1}"""
	${4}
${0}
endsnippet

snippet deff
def ${1:fname}(${2:`!v indent('.') ? 'self' : ''`}):
${0}
endsnippet

# New Method
snippet defs
def ${1:mname}(self, ${2:arg}):
${0}
endsnippet

# New Property
snippet property
def ${1:foo}():
	doc = "${2:The $1 property.}"
def fget(self):
	${3:return self._$1}
def fset(self, value):
	${4:self._$1 = value}
def fdel(self):
	${0:del self._$1}
return locals()
	$1 = property(**$1())
endsnippet

# Ifs
snippet if
if ${1:condition}:
	${0}
endsnippet
snippet el
else:
	${0}
endsnippet
snippet ei
elif ${1:condition}:
	${0}
endsnippet
# For
snippet for
for ${1:item} in ${2:items}:
${0}
endsnippet

# Encodes
snippet cutf8
# -*- coding: utf-8 -*-
endsnippet

snippet clatin1
# -*- coding: latin-1 -*-
endsnippet

snippet cascii
# -*- coding: ascii -*-
endsnippet

# Lambda
snippet ld
${1:var} = lambda ${2:vars} : ${0:action}
endsnippet

snippet .
self.
endsnippet

snippet try "Try/Except"
try:
	${1}
except ${2:Exception}, ${3:e}:
	${0:raise $3}
endsnippet
snippet tryl "Try/Except/Else"
try:
	${1}
except ${2:Exception}, ${3:e}:
	${4:raise $3}
else:
	${0}
endsnippet
snippet tryf "Try/Except/Finally"
try:
	${1}
except ${2:Exception}, ${3:e}:
	${4:raise $3}
finally:
	${0}
endsnippet
snippet trylf "Try/Except/Else/Finally"
try:
	${1}
except ${2:Exception}, ${3:e}:
	${4:raise $3}
else:
	${5}
finally:
	${0}
endsnippet

# if __name__ == '__main__':
snippet ifmain
if __name__ == '__main__':
${0:main()}
endsnippet

# __magic__
snippet _
__${1:init}__
endsnippet

# python debugger (pdb)
snippet pdb
import pdb; pdb.set_trace()
endsnippet

# ipython debugger (ipdb)
snippet ipdb
import ipdb; ipdb.set_trace()
endsnippet

# embed ipython itself
snippet iem
import IPython; IPython.embed()
endsnippet

# ipython debugger (pdbbb)
snippet pdbbb
import pdbpp; pdbpp.set_trace()
endsnippet

# remote python debugger (rpdb)
snippet rpdb
import rpdb; rpdb.set_trace()
endsnippet

# ptpython
snippet ptpython
from ptpython.repl import embed
embed(globals(), locals(), vi_mode=${1:False}, history_filename=${2:None})
endsnippet

# python console debugger (pudb)
snippet pudb
import pudb; pudb.set_trace()
endsnippet

snippet pprint
import pprint; pprint.pprint(${1})
endsnippet

snippet "
"""
${0:doc}
"""
endsnippet

# assertions
snippet a=
self.assertEqual(${2}, ${1})
${0}
endsnippet

# test function/method
snippet test
def test_${1:description}(${2:`!v indent('.') ? 'self' : ''`}):
${0}
endsnippet

# test case
snippet testcase
class ${1:ExampleCase}(unittest.TestCase):
	def test_${2:description}(self):
${0}
endsnippet

snippet fut
from __future__ import ${0}
endsnippet

#getopt
snippet getopt
try:
	# Short option syntax: "hv:"
	# Long option syntax: "help" or "verbose="
	opts, args = getopt.getopt(sys.argv[1:], "${1:short_options}", [${2:long_options}])
except getopt.GetoptError, err:
	# Print debug info
	print str(err)
	${3:error_action}
for option, argument in opts:
	if option in ("-h", "--help"):
		${0}
	elif option in ("-v", "--verbose"):
		verbose = argument
endsnippet

# logging
# glog = get log
snippet glog
import logging
logger = logging.getLogger(${1:__name__})
endsnippet

snippet le
logger.error(${1:msg})
endsnippet

# conflict with lambda=ld, therefor we change into Logger.debuG
snippet lg
logger.debug(${1:msg})
endsnippet

snippet lw
logger.warning(${1:msg})
endsnippet

snippet lc
logger.critical(${1:msg})
endsnippet

snippet li
logger.info(${1:msg})
endsnippet

snippet epydoc
"""
${1:Description}
@param ${2:param}: ${3: Description}
@type $2: ${4: Type}
@return: ${5: Description}
@rtype : ${6: Type}
@raise e: ${0: Description}
"""
endsnippet

snippet dol
def ${1:__init__}(self, *args, **kwargs):
	super(${0:ClassName}, self).$1(*args, **kwargs)
endsnippet
snippet kwg
self.${1:var_name} = kwargs.get('$1', ${2:None})
endsnippet
snippet lkwg
${1:var_name} = kwargs.get('$1', ${2:None})
endsnippet
snippet args
*args${1:,}${0}
endsnippet
snippet kwargs
**kwargs${1:,}${0}
endsnippet
snippet akw
*args, **kwargs${1:,}${0}
endsnippet

